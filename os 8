#include <stdio.h>

// Structure to represent a process
struct Process {
    int id;
    int burstTime;
    int remainingTime;
};

// Function to simulate Round Robin scheduling
void roundRobin(struct Process processes[], int n, int timeQuantum) {
    int currentTime = 0;
    int completed = 0;

    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remainingTime > 0) {
                int executionTime = (processes[i].remainingTime > timeQuantum) ? timeQuantum : processes[i].remainingTime;
                processes[i].remainingTime -= executionTime;
                currentTime += executionTime;

                printf("Process %d executed for %d units.\n", processes[i].id, executionTime);

                if (processes[i].remainingTime == 0) {
                    completed++;
                    printf("Process %d completed.\n", processes[i].id);
                }
            }
        }
    }

    printf("All processes completed.\n");
}

int main() {
    int n, timeQuantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter burst time for process %d: ", processes[i].id);
        scanf("%d", &processes[i].burstTime);
        processes[i].remainingTime = processes[i].burstTime;
    }

    printf("Enter time quantum: ");
    scanf("%d", &timeQuantum);

    roundRobin(processes, n, timeQuantum);

    return 0;
}
